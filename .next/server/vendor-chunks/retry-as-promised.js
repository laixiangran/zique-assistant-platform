"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/retry-as-promised";
exports.ids = ["vendor-chunks/retry-as-promised"];
exports.modules = {

/***/ "(rsc)/./node_modules/retry-as-promised/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/retry-as-promised/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryAsPromised = exports.applyJitter = exports.TimeoutError = void 0;\nclass TimeoutError extends Error {\n    constructor(message, previousError) {\n        super(message);\n        this.name = \"TimeoutError\";\n        this.previous = previousError;\n    }\n}\nexports.TimeoutError = TimeoutError;\nfunction matches(match, err) {\n    if (typeof match === 'function') {\n        try {\n            if (err instanceof match)\n                return true;\n        }\n        catch (_) {\n            return !!match(err);\n        }\n    }\n    if (match === err.toString())\n        return true;\n    if (match === err.message)\n        return true;\n    return match instanceof RegExp\n        && (match.test(err.message) || match.test(err.toString()));\n}\nfunction applyJitter(delayMs, maxJitterMs) {\n    const newDelayMs = delayMs + (Math.random() * maxJitterMs * (Math.random() > 0.5 ? 1 : -1));\n    return Math.max(0, newDelayMs);\n}\nexports.applyJitter = applyJitter;\nfunction retryAsPromised(callback, optionsInput) {\n    if (!callback || !optionsInput) {\n        throw new Error('retry-as-promised must be passed a callback and a options set');\n    }\n    optionsInput = (typeof optionsInput === \"number\" ? { max: optionsInput } : optionsInput);\n    const options = {\n        $current: \"$current\" in optionsInput ? optionsInput.$current : 1,\n        max: optionsInput.max,\n        timeout: optionsInput.timeout || undefined,\n        match: optionsInput.match ? Array.isArray(optionsInput.match) ? optionsInput.match : [optionsInput.match] : [],\n        backoffBase: optionsInput.backoffBase === undefined ? 100 : optionsInput.backoffBase,\n        backoffExponent: optionsInput.backoffExponent || 1.1,\n        backoffJitter: optionsInput.backoffJitter || 0.0,\n        report: optionsInput.report,\n        name: optionsInput.name || callback.name || 'unknown'\n    };\n    if (options.match && !Array.isArray(options.match))\n        options.match = [options.match];\n    if (options.report)\n        options.report('Trying ' + options.name + ' #' + options.$current + ' at ' + new Date().toLocaleTimeString(), options);\n    return new Promise(function (resolve, reject) {\n        let timeout;\n        let backoffTimeout;\n        let lastError;\n        if (options.timeout) {\n            timeout = setTimeout(function () {\n                if (backoffTimeout)\n                    clearTimeout(backoffTimeout);\n                reject(new TimeoutError(options.name + ' timed out', lastError));\n            }, options.timeout);\n        }\n        Promise.resolve(callback({ current: options.$current }))\n            .then(resolve)\n            .then(function () {\n            if (timeout)\n                clearTimeout(timeout);\n            if (backoffTimeout)\n                clearTimeout(backoffTimeout);\n        })\n            .catch(function (err) {\n            if (timeout)\n                clearTimeout(timeout);\n            if (backoffTimeout)\n                clearTimeout(backoffTimeout);\n            lastError = err;\n            if (options.report)\n                options.report((err && err.toString()) || err, options, err);\n            // Should not retry if max has been reached\n            var shouldRetry = options.$current < options.max;\n            if (!shouldRetry)\n                return reject(err);\n            shouldRetry = options.match.length === 0 || options.match.some(function (match) {\n                return matches(match, err);\n            });\n            if (!shouldRetry)\n                return reject(err);\n            var retryDelay = options.backoffBase * Math.pow(options.backoffExponent, options.$current - 1);\n            const backoffJitter = options.backoffJitter;\n            if (backoffJitter !== undefined) {\n                retryDelay = applyJitter(retryDelay, backoffJitter);\n            }\n            // Do some accounting\n            options.$current++;\n            if (options.report)\n                options.report(`Retrying ${options.name} (${options.$current})`, options);\n            if (retryDelay) {\n                // Use backoff function to ease retry rate\n                if (options.report)\n                    options.report(`Delaying retry of ${options.name} by ${retryDelay}`, options);\n                backoffTimeout = setTimeout(function () {\n                    retryAsPromised(callback, options)\n                        .then(resolve)\n                        .catch(reject);\n                }, retryDelay);\n            }\n            else {\n                retryAsPromised(callback, options)\n                    .then(resolve)\n                    .catch(reject);\n            }\n        });\n    });\n}\nexports.retryAsPromised = retryAsPromised;\n;\nexports[\"default\"] = retryAsPromised;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmV0cnktYXMtcHJvbWlzZWQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxtQkFBbUIsR0FBRyxvQkFBb0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELG9CQUFvQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtQ0FBbUMsMkJBQTJCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWMsR0FBRyxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGNBQWMsS0FBSyxXQUFXO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3ppcXVlLWFzc2lzdGFudC1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9yZXRyeS1hcy1wcm9taXNlZC9kaXN0L2luZGV4LmpzP2M1MjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXRyeUFzUHJvbWlzZWQgPSBleHBvcnRzLmFwcGx5Sml0dGVyID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgcHJldmlvdXNFcnJvcikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUaW1lb3V0RXJyb3JcIjtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzRXJyb3I7XG4gICAgfVxufVxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG5mdW5jdGlvbiBtYXRjaGVzKG1hdGNoLCBlcnIpIHtcbiAgICBpZiAodHlwZW9mIG1hdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgbWF0Y2gpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgIHJldHVybiAhIW1hdGNoKGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1hdGNoID09PSBlcnIudG9TdHJpbmcoKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKG1hdGNoID09PSBlcnIubWVzc2FnZSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIG1hdGNoIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgICYmIChtYXRjaC50ZXN0KGVyci5tZXNzYWdlKSB8fCBtYXRjaC50ZXN0KGVyci50b1N0cmluZygpKSk7XG59XG5mdW5jdGlvbiBhcHBseUppdHRlcihkZWxheU1zLCBtYXhKaXR0ZXJNcykge1xuICAgIGNvbnN0IG5ld0RlbGF5TXMgPSBkZWxheU1zICsgKE1hdGgucmFuZG9tKCkgKiBtYXhKaXR0ZXJNcyAqIChNYXRoLnJhbmRvbSgpID4gMC41ID8gMSA6IC0xKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIG5ld0RlbGF5TXMpO1xufVxuZXhwb3J0cy5hcHBseUppdHRlciA9IGFwcGx5Sml0dGVyO1xuZnVuY3Rpb24gcmV0cnlBc1Byb21pc2VkKGNhbGxiYWNrLCBvcHRpb25zSW5wdXQpIHtcbiAgICBpZiAoIWNhbGxiYWNrIHx8ICFvcHRpb25zSW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXRyeS1hcy1wcm9taXNlZCBtdXN0IGJlIHBhc3NlZCBhIGNhbGxiYWNrIGFuZCBhIG9wdGlvbnMgc2V0Jyk7XG4gICAgfVxuICAgIG9wdGlvbnNJbnB1dCA9ICh0eXBlb2Ygb3B0aW9uc0lucHV0ID09PSBcIm51bWJlclwiID8geyBtYXg6IG9wdGlvbnNJbnB1dCB9IDogb3B0aW9uc0lucHV0KTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAkY3VycmVudDogXCIkY3VycmVudFwiIGluIG9wdGlvbnNJbnB1dCA/IG9wdGlvbnNJbnB1dC4kY3VycmVudCA6IDEsXG4gICAgICAgIG1heDogb3B0aW9uc0lucHV0Lm1heCxcbiAgICAgICAgdGltZW91dDogb3B0aW9uc0lucHV0LnRpbWVvdXQgfHwgdW5kZWZpbmVkLFxuICAgICAgICBtYXRjaDogb3B0aW9uc0lucHV0Lm1hdGNoID8gQXJyYXkuaXNBcnJheShvcHRpb25zSW5wdXQubWF0Y2gpID8gb3B0aW9uc0lucHV0Lm1hdGNoIDogW29wdGlvbnNJbnB1dC5tYXRjaF0gOiBbXSxcbiAgICAgICAgYmFja29mZkJhc2U6IG9wdGlvbnNJbnB1dC5iYWNrb2ZmQmFzZSA9PT0gdW5kZWZpbmVkID8gMTAwIDogb3B0aW9uc0lucHV0LmJhY2tvZmZCYXNlLFxuICAgICAgICBiYWNrb2ZmRXhwb25lbnQ6IG9wdGlvbnNJbnB1dC5iYWNrb2ZmRXhwb25lbnQgfHwgMS4xLFxuICAgICAgICBiYWNrb2ZmSml0dGVyOiBvcHRpb25zSW5wdXQuYmFja29mZkppdHRlciB8fCAwLjAsXG4gICAgICAgIHJlcG9ydDogb3B0aW9uc0lucHV0LnJlcG9ydCxcbiAgICAgICAgbmFtZTogb3B0aW9uc0lucHV0Lm5hbWUgfHwgY2FsbGJhY2submFtZSB8fCAndW5rbm93bidcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLm1hdGNoICYmICFBcnJheS5pc0FycmF5KG9wdGlvbnMubWF0Y2gpKVxuICAgICAgICBvcHRpb25zLm1hdGNoID0gW29wdGlvbnMubWF0Y2hdO1xuICAgIGlmIChvcHRpb25zLnJlcG9ydClcbiAgICAgICAgb3B0aW9ucy5yZXBvcnQoJ1RyeWluZyAnICsgb3B0aW9ucy5uYW1lICsgJyAjJyArIG9wdGlvbnMuJGN1cnJlbnQgKyAnIGF0ICcgKyBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsZXQgdGltZW91dDtcbiAgICAgICAgbGV0IGJhY2tvZmZUaW1lb3V0O1xuICAgICAgICBsZXQgbGFzdEVycm9yO1xuICAgICAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tvZmZUaW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYmFja29mZlRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKG9wdGlvbnMubmFtZSArICcgdGltZWQgb3V0JywgbGFzdEVycm9yKSk7XG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UucmVzb2x2ZShjYWxsYmFjayh7IGN1cnJlbnQ6IG9wdGlvbnMuJGN1cnJlbnQgfSkpXG4gICAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgaWYgKGJhY2tvZmZUaW1lb3V0KVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChiYWNrb2ZmVGltZW91dCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgaWYgKGJhY2tvZmZUaW1lb3V0KVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChiYWNrb2ZmVGltZW91dCk7XG4gICAgICAgICAgICBsYXN0RXJyb3IgPSBlcnI7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBvcnQpXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yZXBvcnQoKGVyciAmJiBlcnIudG9TdHJpbmcoKSkgfHwgZXJyLCBvcHRpb25zLCBlcnIpO1xuICAgICAgICAgICAgLy8gU2hvdWxkIG5vdCByZXRyeSBpZiBtYXggaGFzIGJlZW4gcmVhY2hlZFxuICAgICAgICAgICAgdmFyIHNob3VsZFJldHJ5ID0gb3B0aW9ucy4kY3VycmVudCA8IG9wdGlvbnMubWF4O1xuICAgICAgICAgICAgaWYgKCFzaG91bGRSZXRyeSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICBzaG91bGRSZXRyeSA9IG9wdGlvbnMubWF0Y2gubGVuZ3RoID09PSAwIHx8IG9wdGlvbnMubWF0Y2guc29tZShmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcyhtYXRjaCwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRSZXRyeSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB2YXIgcmV0cnlEZWxheSA9IG9wdGlvbnMuYmFja29mZkJhc2UgKiBNYXRoLnBvdyhvcHRpb25zLmJhY2tvZmZFeHBvbmVudCwgb3B0aW9ucy4kY3VycmVudCAtIDEpO1xuICAgICAgICAgICAgY29uc3QgYmFja29mZkppdHRlciA9IG9wdGlvbnMuYmFja29mZkppdHRlcjtcbiAgICAgICAgICAgIGlmIChiYWNrb2ZmSml0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXRyeURlbGF5ID0gYXBwbHlKaXR0ZXIocmV0cnlEZWxheSwgYmFja29mZkppdHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEbyBzb21lIGFjY291bnRpbmdcbiAgICAgICAgICAgIG9wdGlvbnMuJGN1cnJlbnQrKztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJlcG9ydClcbiAgICAgICAgICAgICAgICBvcHRpb25zLnJlcG9ydChgUmV0cnlpbmcgJHtvcHRpb25zLm5hbWV9ICgke29wdGlvbnMuJGN1cnJlbnR9KWAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHJldHJ5RGVsYXkpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgYmFja29mZiBmdW5jdGlvbiB0byBlYXNlIHJldHJ5IHJhdGVcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBvcnQpXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucmVwb3J0KGBEZWxheWluZyByZXRyeSBvZiAke29wdGlvbnMubmFtZX0gYnkgJHtyZXRyeURlbGF5fWAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJhY2tvZmZUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHJ5QXNQcm9taXNlZChjYWxsYmFjaywgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9LCByZXRyeURlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHJ5QXNQcm9taXNlZChjYWxsYmFjaywgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZXRyeUFzUHJvbWlzZWQgPSByZXRyeUFzUHJvbWlzZWQ7XG47XG5leHBvcnRzLmRlZmF1bHQgPSByZXRyeUFzUHJvbWlzZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/retry-as-promised/dist/index.js\n");

/***/ })

};
;